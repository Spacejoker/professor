Hantera all notation (Rw')
Sätt upp några stora random-test där scramblade kuber jämförs mot känt state
Börja fundera på hur block-building ska gå till, centers och edges!

- cube rotations will be needed (X, Y, and Z), for algos and when manuvering the cube for solving.
- Then two moves will be required to be implemented on the cube-state, r and R for instance.

Cube state
Color[6][16] - simple
Transition-loops will be needed for all five moves and for each sticker (starting with someone that is affected). An example is 0 -> 0 -> 12 -> 0 for R, starting at UP.

Languages:
- Haskell: kul, intressant, svårt, vissa grejjer kommer bli sämre.
- Python: king, enkelt.
- Java: tråkigt, kommer bli bra kvalle.

Solving requires some sort of local search approach and to define an algorithm a DSL would be suitable. 

Syntax:
Needed states for initial algorithm:

A inner block 1x1 of color C, correct position: (Inner, 1x1, C, Correct)
An inner 2x1 block of color C, any position: (Inner, 2x1, C, Any)
An inner 2x1 block of color C, correct position: (Inner, 2x1, C, Correct)
An inner 3x1 block of color C, any position: (Inner, 2x1, C, Any)
An inner 3x1 block of color C, correct position: (Inner, 2x1, C, Correct)
An inner 3x3 block of color C, correct position: (Inner, 3x3, C, Correct)

A 2x1 edge pair, any color combination, any position: (Edge, 2x1, _, Any)
A 3x1 edge triple, any color combination, any position:  (Edge, 3x1, _, Any)
A 3x1 edge triple, any color combination, stored:  (Edge, 3x1, _, Stored)

+ Add a requirement
- Remove a requirement

Example algorithm:

+(Inner, 1x1, D, Correct)
+(Inner, 2x1, D, Any)
+(Inner, 2x1, D, Correct),-(Inner, 2x1, D, Any)
+(Inner, 2x1, D, Any)
+(Inner, 2x1, D, Correct),-(Inner, 2x1, D, Any)
+(Inner, 3x1, D, Any)
+(Inner, 2x1, D, Correct),-(Inner, 2x1, D, Any)
+(Inner, 3x3, D, Correct),-(Inner, 2x1, D, Correct),-(Inner, 2x1, D, Correct),-(Inner, 1x1, D, Correct)


TODO:
Intro menu:
Graphical solve (with selected algorithm)
Batch mode (parameters)
Show statistics

Set up a storage for statistics, local db? done

//Using external code for menu: http://www.pygame.org/project-MenuSystem-2031-.html

Todo 2013-02-19:
fix a scramble that only destroys edge
make an option to display edges more clearly in the gui
set up a new edge-build-only-algorithm
Implement a check if we have a correct piece on LB/BR/FL that mathes the middle piece on FR
flip it correctly
pair them up
find another piece
flip that one correctly
put them togehter and store in top layer

Todo 2013-02-26:
done#Start writing report, look at structure and such for abt 2 hr.
done#Complete the solve - fix parity and solve the 3x3 cube
Refine the standard algorithm, make it not fail over 1/100
done#update graphics/layout of application
done#refactoring needs?


//broken down:
refactor user-input mapping #done
fix custom-scramble
hardcoded parity fix LF
Solve the cross
Solve pairs
OLL
PLL
automated running, dumping info when complete/fail
store scramble+solution on completion


make 3 different modes:
introduce cool navigation system
 - batch
 - standard
 - show algo

Todo 2013-02-27:
done#Complete graphical overhaul
Introduce navigation system that is more visual
done#Save successful solves
Add replay function (scramble + solve), with play/stop/change speed/go backwards buttons

Todo 2013-02-27:
done#Decouple peristance and algo-solving.
done#Decouple gui entry and algo-calls, make a call like: solve(cube, algorithm-name) that returns the data.
done#Create another cmd-line interface that can interact with the db (add/remove algos, print algos, modify scramble-lists etc)
Let algos be in db instead of text file
Start working with several algorithms for just the first face, see what can be done easily and automatically
expand to first two faces.
expand to known areas of trouble.


Todo 2013-03-04:
Refactor rules to be a class and make it work json-style. 
Make a template, allow for in out/db.

//broken down:
save json-algo to db
retrieve it from db
dump back to file
create format for the rules - give them IDs?
read the new format when creating up a new Imported_algo with solver
make it easy to replay the latest runner-solve in gui
solve a few steps with the new algo structure
